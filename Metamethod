-- // variables
local library = {}
local pages = {}
local sections = {}
local multisections = {}
local mssections = {}
local toggles = {}
local buttons = {}
local sliders = {}
local dropdowns = {}
local multiboxs = {}
local buttonboxs = {}
local textboxs = {}
local keybinds = {}
local colorpickers = {}
local configloaders = {}
local watermarks = {}
local loaders = {}
--
local utility = {}
--
local check_exploit = (syn and "Synapse") or (KRNL_LOADED and "Krnl") or (isourclosure and "ScriptWare") or nil
local plrs = game:GetService("Players")
local cre = game:GetService("CoreGui")
local rs = game:GetService("RunService")
local ts = game:GetService("TweenService") 
local uis = game:GetService("UserInputService") 
local hs = game:GetService("HttpService")
local ws = game:GetService("Workspace")
local plr = plrs.LocalPlayer
local cam = ws.CurrentCamera
-- // indexes
library.__index = library
pages.__index = pages
sections.__index = sections
multisections.__index = multisections
mssections.__index = mssections
toggles.__index = toggles
buttons.__index = buttons
sliders.__index = sliders
dropdowns.__index = dropdowns
multiboxs.__index = multiboxs
buttonboxs.__index = buttonboxs
textboxs.__index = textboxs
keybinds.__index = keybinds
colorpickers.__index = colorpickers
configloaders.__index = configloaders
watermarks.__index = watermarks
loaders.__index = loaders
-- // functions
utility.new = function(instance, properties)
	-- // instance
	local ins = Instance.new(instance)
	-- // properties setting
	for property, value in pairs(properties) do
		ins[property] = value
	end
	-- // return
	return ins
end

utility.dragify = function(ins, touse)
	local dragging
	local dragInput
	local dragStart
	local startPos
	-- 
	local function update(input)
		local delta = input.Position - dragStart
		touse:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.1, true)
	end
	--
	ins.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = touse.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	--
	ins.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	--
	uis.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end

utility.round = function(n, d)
	return tonumber(string.format("%."..(d or 0).."f", n))
end

utility.zigzag = function(X)
	return math.acos(math.cos(X * math.pi)) / math.pi
end

utility.capatalize = function(s)
	local l = ""
	for v in s:gmatch('%u') do
		l = l..v
	end
	return l
end

utility.splitenum = function(enum)
	local s = tostring(enum):split(".")
	return s[#s]
end

utility.from_hex = function(h)
	local r, g, b = string.match(h, "^#?(%w%w)(%w%w)(%w%w)$")
	return Color3.fromRGB(tonumber(r, 16), tonumber(g, 16), tonumber(b, 16))
end

utility.to_hex = function(c)
	return string.format("#%02X%02X%02X", c.R * 255, c.G * 255, c.B * 255)
end

utility.removespaces = function(s)
	return s:gsub(" ", "")
end

-- // main
function library:new(props)
	-- // properties
	local textsize = props.textsize or props.TextSize or props.textSize or props.Textsize or 12
	local font = props.font or props.Font or "RobotoMono"
	local name = props.name or props.Name or props.UiName or props.Uiname or props.uiName or props.username or props.Username or props.UserName or props.userName or "new ui"
	local color = props.color or props.Color or props.mainColor or props.maincolor or props.MainColor or props.Maincolor or props.Accent or props.accent or Color3.fromRGB(225, 58, 81)
	-- // variables
	local window = {}
	-- // main
	local screen = utility.new(
		"ScreenGui",
		{
			Name = tostring(math.random(0, 999999))..tostring(math.random(0, 999999)),
			DisplayOrder = 9999,
			ResetOnSpawn = false,
			ZIndexBehavior = "Global",
			Parent = cre
		}
	)
	-- 
	if (check_exploit == "Synapse" and syn.request) then
		syn.protect_gui(screen)
	end
	-- 1
	local outline = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = color,
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(0, 500, 0, 606),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Parent = screen
		}
	)
	-- 2
	local outline2 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(0, 0, 0),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderSizePixel = 1,
			Size = UDim2.new(1, -4, 1, -4),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Parent = outline
		}
	)
	-- 3
	local indent = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Parent = outline2
		}
	)
	-- 4
	local main = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 1),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1, -10, 1, -25),
			Position = UDim2.new(0.5, 0, 1, -5),
			Parent = outline2
		}
	)
	--
	local title = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 20),
			Position = UDim2.new(0.5, 0, 0, 0),
			Parent = outline2
		}
	)
	-- 5
	local outline3 = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundColor3 = Color3.fromRGB(24, 24, 24),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Parent = main
		}
	)
	--
	local titletext = utility.new(
		"TextLabel",
		{
			AnchorPoint = Vector2.new(0.5, 0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -10, 1, 0),
			Position = UDim2.new(0.5, 0, 0, 0),
			Font = font,
			Text = name,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextXAlignment = "Left",
			TextSize = textsize,
			TextStrokeTransparency = 0,
			Parent = title
		}
	)
	-- 6
	local holder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -6, 1, -6),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Parent = main
		}
	)
	-- 7
	local holder = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0.5),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, -6, 1, -6),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Parent = main
		}
	)
	-- 8
	local tabs = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 1),
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(12, 12, 12),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 1, -20),
			Position = UDim2.new(0.5, 0, 1, 0),
			Parent = holder
		}
	)
	--
	local tabsbuttons = utility.new(
		"Frame",
		{
			AnchorPoint = Vector2.new(0.5, 0),
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 21),
			Position = UDim2.new(0.5, 0, 0, 0),
			ZIndex = 2,
			Parent = holder
		}
	)
	-- 9
	local outline4 = utility.new(
		"Frame",
		{
			BackgroundColor3 = Color3.fromRGB(20, 20, 20),
			BorderColor3 = Color3.fromRGB(56, 56, 56),
			BorderMode = "Inset",
			BorderSizePixel = 1,
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.new(0, 0, 0, 0),
			Parent = tabs
		}
	)
	--
	utility.new(
		"UIListLayout",
		{
			FillDirection = "Horizontal",
			Padding = UDim.new(0, 2),
			Parent = tabsbuttons
		}
	)
	--
	utility.dragify(title, outline)
	-- // window tbl
	window = {
		["screen"] = screen,
		["holder"] = holder,
		["labels"] = {},
		["tabs"] = outline4,
		["tabsbuttons"] = tabsbuttons,
		["outline"] = outline,
		["pages"] = {},
		["pointers"] = {},
		["dropdowns"] = {},
		["multiboxes"] = {},
		["buttonboxs"] = {},
		["colorpickers"] = {},
		["x"] = true,
		["y"] = true,
		["key"] = Enum.KeyCode.RightShift,
		["textsize"] = textsize,
		["font"] = font,
		["theme"] = {
			["accent"] = color
		},
		["themeitems"] = {
			["accent"] = {
				["BackgroundColor3"] = {},
				["BorderColor3"] = {},
				["TextColor3"] = {}
			}
		}
	}
	--
	table.insert(window.themeitems["accent"]["BackgroundColor3"], outline)
	--
	local toggled = true
	local cooldown = false
	local saved = UDim2.new(0, 0, 0, 0)
	--
	uis.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.Keyboard then
			if Input.KeyCode == window.key then
				if cooldown == false then
					if toggled then
						cooldown = true
						toggled = not toggled
						saved = outline.Position
						local xx, yy = 0, 0
						local xxx, yyy = 0, 0
						--
						if (outline.AbsolutePosition.X + (outline.AbsoluteSize.X / 2)) < (cam.ViewportSize.X / 2) then
							xx = -3
						else
							xx = 3
						end
						--
						if window.y then
							if (outline.AbsolutePosition.Y + (outline.AbsoluteSize.Y / 2)) < (cam.ViewportSize.Y / 2) then
								yy = -3
							else
								yy = 3
							end
						else
							yy = saved.Y.Scale
							yyy = saved.Y.Offset
						end
						--
						if window.x == false and window.y == false then
							screen.Enabled = false
						else
							ts:Create(outline, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(xx, xxx, yy, yyy)}):Play()
						end
						wait(0.5)
						cooldown = false
					else
						cooldown = true
						toggled = not toggled
						if window.x == false and window.y == false then
							screen.Enabled = true
						else
							ts:Create(outline, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = saved}):Play()
						end
						wait(0.5)
						cooldown = false
					end
				end
			end
		end
	end)
	--
	window.labels[#window.labels + 1] = titletext
	-- // metatable indexing + return
	setmetatable(window, library)
	return window
end

-- Function to create a toggle
function library:toggle(props)
	local name = props.name or "Toggle"
	local default = props.default or false
	local toggle = {}
	
	local frame = utility.new("Frame", {
		BackgroundColor3 = Color3.fromRGB(24, 24, 24),
		Size = UDim2.new(1, 0, 0, 30),
		Parent = self.holder,
	})
	
	local label = utility.new("TextLabel", {
		Text = name,
		BackgroundTransparency = 1,
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0, 10, 0, 0),
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Parent = frame,
	})
	
	local switch = utility.new("TextButton", {
		BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0),
		Size = UDim2.new(0.25, 0, 0.75, 0),
		Position = UDim2.new(1, -40, 0.5, -15),
		Text = "",
		Parent = frame,
	})

	switch.MouseButton1Click:Connect(function()
		default = not default
		switch.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
		props.callback(default)
	end)

	return toggle
end

-- Function to create a slider
function library:slider(props)
	local name = props.name or "Slider"
	local min = props.min or 0
	local max = props.max or 100
	local default = props.default or 50
	local slider = {}

	local frame = utility.new("Frame", {
		BackgroundColor3 = Color3.fromRGB(24, 24, 24),
		Size = UDim2.new(1, 0, 0, 30),
		Parent = self.holder,
	})

	local label = utility.new("TextLabel", {
		Text = name,
		BackgroundTransparency = 1,
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0, 10, 0, 0),
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Parent = frame,
	})

	local sliderBar = utility.new("Frame", {
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		Size = UDim2.new(1, 0, 0, 5),
		Position = UDim2.new(0, 0, 0.5, -2.5),
		Parent = frame,
	})

	local knob = utility.new("Frame", {
		BackgroundColor3 = Color3.fromRGB(0, 0, 0),
		Size = UDim2.new(0, 10, 0, 10),
		Position = UDim2.new(default / max, -5, 0.5, -5),
		Parent = sliderBar,
	})

	knob.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local connection
			connection = uis.InputChanged:Connect(function(move)
				if move.UserInputType == Enum.UserInputType.MouseMovement then
					local mousePos = move.Position.X
					local sliderPos = sliderBar.AbsolutePosition.X
					local sliderWidth = sliderBar.AbsoluteSize.X

					local value = math.clamp((mousePos - sliderPos) / sliderWidth, 0, 1)
					knob.Position = UDim2.new(value, -5, 0.5, -5)
					local actualValue = math.floor(value * (max - min) + min)
					props.callback(actualValue)
				end
			end)

			input.InputEnded:Connect(function()
				connection:Disconnect()
			end)
		end
	end)

	return slider
end

-- Example of using the library
local myLibrary = library:new({ name = "My UI", color = Color3.fromRGB(60, 60, 60) })
local myPage = myLibrary:page({ name = "Tab 1" })
local myPage2 = myLibrary:page({ name = "Tab 2" })

-- Create a toggle
myLibrary:toggle({ name = "My Toggle", default = true, callback = function(value) print("Toggle Value: ", value) end })
-- Create a slider
myLibrary:slider({ name = "My Slider", min = 0, max = 100, default = 50, callback = function(value) print("Slider Value: ", value) end })
